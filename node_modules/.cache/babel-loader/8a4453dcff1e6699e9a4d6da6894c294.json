{"ast":null,"code":"var _jsxFileName = \"/home/kms/workbench/git_repos/torchlight/src/components/Events.js\";\nimport React, { Component } from 'react';\nconst API = 'https://hn.algolia.com/api/v1/search?query=';\nconst DEFAULT_QUERY = 'redux';\n\nclass Events extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: [],\n      isLoading: false,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: true\n    });\n    fetch(API + DEFAULT_QUERY).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => this.setState({\n      events: data.events,\n      isLoading: false\n    })).catch(error => this.setState({\n      error,\n      isLoading: false\n    }));\n    console.log(this.state.events);\n  }\n\n  render() {\n    const _this$state = this.state,\n          events = _this$state.events,\n          isLoading = _this$state.isLoading,\n          error = _this$state.error;\n\n    if (error) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, error.message);\n    }\n\n    if (isLoading) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Loading ...\");\n    }\n\n    return React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Events;","map":{"version":3,"sources":["/home/kms/workbench/git_repos/torchlight/src/components/Events.js"],"names":["React","Component","API","DEFAULT_QUERY","Events","constructor","props","state","events","isLoading","error","componentDidMount","setState","fetch","then","response","ok","json","Error","data","catch","console","log","render","message"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,MAAMC,GAAG,GAAG,6CAAZ;AACA,MAAMC,aAAa,GAAG,OAAtB;;AAEA,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAC7BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,EADG;AAEXC,MAAAA,SAAS,EAAE,KAFA;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAAb;AAKD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,QAAL,CAAc;AAAEH,MAAAA,SAAS,EAAE;AAAb,KAAd;AAEAI,IAAAA,KAAK,CAACX,GAAG,GAAGC,aAAP,CAAL,CACGW,IADH,CACQC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,OAFD,MAEO;AACL,cAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;AACF,KAPH,EAQGJ,IARH,CAQQK,IAAI,IAAI,KAAKP,QAAL,CAAc;AAAEJ,MAAAA,MAAM,EAAEW,IAAI,CAACX,MAAf;AAAuBC,MAAAA,SAAS,EAAE;AAAlC,KAAd,CARhB,EASGW,KATH,CASSV,KAAK,IAAI,KAAKE,QAAL,CAAc;AAAEF,MAAAA,KAAF;AAASD,MAAAA,SAAS,EAAE;AAApB,KAAd,CATlB;AAUEY,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKf,KAAL,CAAWC,MAAvB;AACH;;AAGDe,EAAAA,MAAM,GAAG;AAAA,wBAC8B,KAAKhB,KADnC;AAAA,UACCC,MADD,eACCA,MADD;AAAA,UACSC,SADT,eACSA,SADT;AAAA,UACoBC,KADpB,eACoBA,KADpB;;AAGP,QAAIA,KAAJ,EAAW;AACT,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIA,KAAK,CAACc,OAAV,CAAP;AACD;;AAED,QAAIf,SAAJ,EAAe;AACb,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAP;AACD;;AAED,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASD;;AAhD4B;;AAmD/B,eAAeL,MAAf","sourcesContent":["\nimport React, { Component } from 'react';\n\nconst API = 'https://hn.algolia.com/api/v1/search?query=';\nconst DEFAULT_QUERY = 'redux';\n\nclass Events extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      events: [],\n      isLoading: false,\n      error: null,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ isLoading: true });\n\n    fetch(API + DEFAULT_QUERY)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => this.setState({ events: data.events, isLoading: false }))\n      .catch(error => this.setState({ error, isLoading: false }));\n      console.log(this.state.events);\n  }\n\n\n  render() {\n    const { events, isLoading, error } = this.state;\n\n    if (error) {\n      return <p>{error.message}</p>;\n    }\n\n    if (isLoading) {\n      return <p>Loading ...</p>;\n    }\n\n    return (\n      <ul>\n        {/*events.map(event =>\n          <li key={event.objectID}>\n            <a href={event.url}>{event.title}</a>\n          </li>\n        )*/}\n      </ul>\n    );\n  }\n}\n\nexport default Events;"]},"metadata":{},"sourceType":"module"}